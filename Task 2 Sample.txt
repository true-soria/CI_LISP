
/home/true/CLionProjects/CI_LISP/cmake-build-debug/cilisp

	> (add ((let (abcd 1)) (sub 3 abcd)) 4)
lex: LPAREN
	Int Type: 6
lex: FUNC sval = add

> lex: LPAREN
lex: LPAREN
lex: LET
lex: LPAREN
lex: SYMBOL sval = abcd
lex: INT dval = 1.000000
yacc: number ::= INT
yacc: s_expr ::= number
lex: RPAREN
yacc: let_elem ::= LPAREN SYMBOL s_expr RPAREN
yacc: let_list ::= LET let_elem
lex: RPAREN
yacc: let_section ::= LPAREN let_list RPAREN
lex: LPAREN
lex: FUNC sval = sub
lex: INT dval = 3.000000
yacc: number ::= INT
yacc: s_expr ::= number
lex: SYMBOL sval = abcd
yacc: symbol ::= SYMBOL
yacc: s_expr ::= symbol
lex: RPAREN
yacc: s_expr ::= LPAREN FUNC expr expr RPAREN
lex: RPAREN
yacc: s_expr ::= LPAREN let_section s_expr RPARENlex: INT dval = 4.000000
yacc: number ::= INT
yacc: s_expr ::= number
lex: RPAREN
yacc: s_expr ::= LPAREN FUNC expr expr RPAREN
lex: EOL
yacc: program ::= s_expr EOL
	(mult ((let (a 1) (b 2)) (add a b)) (sqrt 2))
lex: LPAREN
lex: FUNC sval = mult
lex: LPAREN
lex: LPAREN
lex: LET
lex: LPAREN
lex: SYMBOL sval = a
lex: INT dval = 1.000000
	Double Type: 4.242641
yacc: number ::= INT
yacc: s_expr ::= number

lex: RPAREN
> yacc: let_elem ::= LPAREN SYMBOL s_expr RPAREN
yacc: let_list ::= LET let_elem
lex: LPAREN
lex: SYMBOL sval = b
lex: INT dval = 2.000000
yacc: number ::= INT
yacc: s_expr ::= number
lex: RPAREN
yacc: let_elem ::= LPAREN SYMBOL s_expr RPAREN
yacc: let_list ::= let_list let_elem
lex: RPAREN
yacc: let_section ::= LPAREN let_list RPAREN
lex: LPAREN
lex: FUNC sval = add
lex: SYMBOL sval = a
yacc: symbol ::= SYMBOL
yacc: s_expr ::= symbol
lex: SYMBOL sval = b
yacc: symbol ::= SYMBOL
yacc: s_expr ::= symbol
lex: RPAREN
yacc: s_expr ::= LPAREN FUNC expr expr RPAREN
lex: RPAREN
yacc: s_expr ::= LPAREN let_section s_expr RPARENlex: LPAREN
lex: FUNC sval = sqrt
lex: INT dval = 2.000000
yacc: number ::= INT
yacc: s_expr ::= number
lex: RPAREN
yacc: s_expr ::= LPAREN FUNC expr RPAREN
lex: RPAREN
yacc: s_expr ::= LPAREN FUNC expr expr RPAREN
lex: EOL
yacc: program ::= s_expr EOL
	(add ((let (a ((let (b 2)) (mult b (sqrt 10))))) (div a 2)) ((let (c 5)) (sqrt c)))
lex: LPAREN
lex: FUNC sval = add
lex: LPAREN
lex: LPAREN
lex: LET
lex: LPAREN
lex: SYMBOL sval = a
lex: LPAREN
lex: LPAREN
lex: LET
	Double Type: 5.398346
lex: LPAREN

lex: SYMBOL sval = b
> lex: INT dval = 2.000000
yacc: number ::= INT
yacc: s_expr ::= number
lex: RPAREN
yacc: let_elem ::= LPAREN SYMBOL s_expr RPAREN
yacc: let_list ::= LET let_elem
lex: RPAREN
yacc: let_section ::= LPAREN let_list RPAREN
lex: LPAREN
lex: FUNC sval = mult
lex: SYMBOL sval = b
yacc: symbol ::= SYMBOL
yacc: s_expr ::= symbol
lex: LPAREN
lex: FUNC sval = sqrt
lex: INT dval = 10.000000
yacc: number ::= INT
yacc: s_expr ::= number
lex: RPAREN
yacc: s_expr ::= LPAREN FUNC expr RPAREN
lex: RPAREN
yacc: s_expr ::= LPAREN FUNC expr expr RPAREN
lex: RPAREN
yacc: s_expr ::= LPAREN let_section s_expr RPARENlex: RPAREN
yacc: let_elem ::= LPAREN SYMBOL s_expr RPAREN
yacc: let_list ::= LET let_elem
lex: RPAREN
yacc: let_section ::= LPAREN let_list RPAREN
lex: LPAREN
lex: FUNC sval = div
lex: SYMBOL sval = a
yacc: symbol ::= SYMBOL
yacc: s_expr ::= symbol
lex: INT dval = 2.000000
yacc: number ::= INT
yacc: s_expr ::= number
lex: RPAREN
yacc: s_expr ::= LPAREN FUNC expr expr RPAREN
lex: RPAREN
yacc: s_expr ::= LPAREN let_section s_expr RPARENlex: LPAREN
lex: LPAREN
lex: LET
lex: LPAREN
lex: SYMBOL sval = c
lex: INT dval = 5.000000
yacc: number ::= INT
yacc: s_expr ::= number
lex: RPAREN
yacc: let_elem ::= LPAREN SYMBOL s_expr RPAREN
yacc: let_list ::= LET let_elem
lex: RPAREN
yacc: let_section ::= LPAREN let_list RPAREN
lex: LPAREN
lex: FUNC sval = sqrt
lex: SYMBOL sval = c
yacc: symbol ::= SYMBOL
yacc: s_expr ::= symbol
lex: RPAREN
yacc: s_expr ::= LPAREN FUNC expr RPAREN
lex: RPAREN
yacc: s_expr ::= LPAREN let_section s_expr RPARENlex: RPAREN
yacc: s_expr ::= LPAREN FUNC expr expr RPAREN
lex: EOL
yacc: program ::= s_expr EOL
	((let (first (sub 5 1)) (second 2)) (add (pow 2 first) (sqrt second)))
lex: LPAREN
lex: LPAREN
lex: LET
lex: LPAREN
lex: SYMBOL sval = first
lex: LPAREN
lex: FUNC sval = sub
lex: INT dval = 5.000000
yacc: number ::= INT
yacc: s_expr ::= number
lex: INT dval = 1.000000
yacc: number ::= INT
Double Type: 17.414214
yacc: s_expr ::= number
lex: RPAREN

> yacc: s_expr ::= LPAREN FUNC expr expr RPAREN
lex: RPAREN
yacc: let_elem ::= LPAREN SYMBOL s_expr RPAREN
yacc: let_list ::= LET let_elem
lex: LPAREN
lex: SYMBOL sval = second
lex: INT dval = 2.000000
yacc: number ::= INT
yacc: s_expr ::= number
lex: RPAREN
yacc: let_elem ::= LPAREN SYMBOL s_expr RPAREN
yacc: let_list ::= let_list let_elem
lex: RPAREN
yacc: let_section ::= LPAREN let_list RPAREN
lex: LPAREN
lex: FUNC sval = add
lex: LPAREN
lex: FUNC sval = pow
lex: INT dval = 2.000000
yacc: number ::= INT
yacc: s_expr ::= number
lex: SYMBOL sval = first
yacc: symbol ::= SYMBOL
yacc: s_expr ::= symbol
lex: RPAREN
yacc: s_expr ::= LPAREN FUNC expr expr RPAREN
lex: LPAREN
lex: FUNC sval = sqrt
lex: SYMBOL sval = second
yacc: symbol ::= SYMBOL
yacc: s_expr ::= symbol
lex: RPAREN
yacc: s_expr ::= LPAREN FUNC expr RPAREN
lex: RPAREN
yacc: s_expr ::= LPAREN FUNC expr expr RPAREN
lex: RPAREN
yacc: s_expr ::= LPAREN let_section s_expr RPARENlex: EOL
yacc: program ::= s_expr EOL
	((let (a ((let (c 3) (d 4)) (mult c d)))) (sqrt a))
lex: LPAREN
lex: LPAREN
lex: LET
lex: LPAREN
lex: SYMBOL sval = a
lex: LPAREN
lex: LPAREN
lex: LET
lex: LPAREN
lex: SYMBOL sval = c
lex: INT dval = 3.000000
yacc: number ::= INT
	Double Type: 3.464102
yacc: s_expr ::= number
lex: RPAREN

yacc: let_elem ::= LPAREN SYMBOL s_expr RPAREN
yacc: let_list ::= LET let_elem
> lex: LPAREN
lex: SYMBOL sval = d
lex: INT dval = 4.000000
yacc: number ::= INT
yacc: s_expr ::= number
lex: RPAREN
yacc: let_elem ::= LPAREN SYMBOL s_expr RPAREN
yacc: let_list ::= let_list let_elem
lex: RPAREN
yacc: let_section ::= LPAREN let_list RPAREN
lex: LPAREN
lex: FUNC sval = mult
lex: SYMBOL sval = c
yacc: symbol ::= SYMBOL
yacc: s_expr ::= symbol
lex: SYMBOL sval = d
yacc: symbol ::= SYMBOL
yacc: s_expr ::= symbol
lex: RPAREN
yacc: s_expr ::= LPAREN FUNC expr expr RPAREN
lex: RPAREN
yacc: s_expr ::= LPAREN let_section s_expr RPARENlex: RPAREN
yacc: let_elem ::= LPAREN SYMBOL s_expr RPAREN
yacc: let_list ::= LET let_elem
lex: RPAREN
yacc: let_section ::= LPAREN let_list RPAREN
lex: LPAREN
lex: FUNC sval = sqrt
lex: SYMBOL sval = a
yacc: symbol ::= SYMBOL
yacc: s_expr ::= symbol
lex: RPAREN
yacc: s_expr ::= LPAREN FUNC expr RPAREN
lex: RPAREN
yacc: s_expr ::= LPAREN let_section s_expr RPARENlex: EOL
yacc: program ::= s_expr EOL

	quit
yacc: s_expr ::= QUIT

Process finished with exit code 0
