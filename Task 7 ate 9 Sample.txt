/home/true/CLionProjects/CI_LISP/cmake-build-debug/cilisp

> ((let (double myFunc lambda (x y) (mult (add x 5) (sub y 2)))) (sub (myFunc 3 5) 2))
lex: LPAREN
lex: LPAREN
lex: LET
lex: LPAREN
lex: TYPE sval = double
lex: SYMBOL sval = myFunc
lex: LAMBDA
lex: LPAREN
lex: SYMBOL sval = x
lex: SYMBOL sval = y
lex: RPAREN
yacc: arg_list ::= SYMBOL
yacc: arg_list ::= SYMBOL arg_list
lex: LPAREN
lex: FUNC sval = mult
lex: LPAREN
lex: FUNC sval = add
lex: SYMBOL sval = x
yacc: s_expr ::= SYMBOL
lex: INT dval = 5.000000
yacc: number ::= INT
yacc: s_expr ::= number
lex: RPAREN
yacc: s_expr_list ::= s_expr
yacc: s_expr_list ::= s_expr s_expr_list
yacc: s_expr ::= LPAREN FUNC s_expr RPAREN
yacc: s_expr ::= f_expr
lex: LPAREN
lex: FUNC sval = sub
lex: SYMBOL sval = y
yacc: s_expr ::= SYMBOL
lex: INT dval = 2.000000
yacc: number ::= INT
yacc: s_expr ::= number
lex: RPAREN
yacc: s_expr_list ::= s_expr
yacc: s_expr_list ::= s_expr s_expr_list
yacc: s_expr ::= LPAREN FUNC s_expr RPAREN
yacc: s_expr ::= f_expr
lex: RPAREN
yacc: s_expr_list ::= s_expr
yacc: s_expr_list ::= s_expr s_expr_list
yacc: s_expr ::= LPAREN FUNC s_expr RPAREN
yacc: s_expr ::= f_expr
lex: RPAREN
yacc: let_elem ::= LPAREN TYPE SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN
yacc: let_list ::= LET let_elem
lex: RPAREN
yacc: let_section ::= LPAREN let_list RPAREN
lex: LPAREN
lex: FUNC sval = sub
lex: LPAREN
lex: SYMBOL sval = myFunc
lex: INT dval = 3.000000
yacc: number ::= INT
yacc: s_expr ::= number
lex: INT dval = 5.000000
yacc: number ::= INT
yacc: s_expr ::= number
lex: RPAREN
yacc: s_expr_list ::= s_expr
yacc: s_expr_list ::= s_expr s_expr_list
yacc: s_expr ::= LPAREN SYMBOL s_expr_list RPAREN
yacc: s_expr ::= f_expr
lex: INT dval = 2.000000
yacc: number ::= INT
yacc: s_expr ::= number
lex: RPAREN
yacc: s_expr_list ::= s_expr
yacc: s_expr_list ::= s_expr s_expr_list
yacc: s_expr ::= LPAREN FUNC s_expr RPAREN
yacc: s_expr ::= f_expr
lex: RPAREN
yacc: s_expr ::= LPAREN let_section s_expr RPAREN
lex: EOL
yacc: program ::= s_expr EOL
########Int Type: 22

> ((let (f lambda (x y) (add x y)))(f (sub 5 2) (mult 2 3))) 
lex: LPAREN
lex: LPAREN
lex: LET
lex: LPAREN
lex: SYMBOL sval = f
lex: LAMBDA
lex: LPAREN
lex: SYMBOL sval = x
lex: SYMBOL sval = y
lex: RPAREN
yacc: arg_list ::= SYMBOL
yacc: arg_list ::= SYMBOL arg_list
lex: LPAREN
lex: FUNC sval = add
lex: SYMBOL sval = x
yacc: s_expr ::= SYMBOL
lex: SYMBOL sval = y
yacc: s_expr ::= SYMBOL
lex: RPAREN
yacc: s_expr_list ::= s_expr
yacc: s_expr_list ::= s_expr s_expr_list
yacc: s_expr ::= LPAREN FUNC s_expr RPAREN
yacc: s_expr ::= f_expr
lex: RPAREN
yacc: let_elem ::= LPAREN SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN
yacc: let_list ::= LET let_elem
lex: RPAREN
yacc: let_section ::= LPAREN let_list RPAREN
lex: LPAREN
lex: SYMBOL sval = f
lex: LPAREN
lex: FUNC sval = sub
lex: INT dval = 5.000000
yacc: number ::= INT
yacc: s_expr ::= number
lex: INT dval = 2.000000
yacc: number ::= INT
yacc: s_expr ::= number
lex: RPAREN
yacc: s_expr_list ::= s_expr
yacc: s_expr_list ::= s_expr s_expr_list
yacc: s_expr ::= LPAREN FUNC s_expr RPAREN
yacc: s_expr ::= f_expr
lex: LPAREN
lex: FUNC sval = mult
lex: INT dval = 2.000000
yacc: number ::= INT
yacc: s_expr ::= number
lex: INT dval = 3.000000
yacc: number ::= INT
yacc: s_expr ::= number
lex: RPAREN
yacc: s_expr_list ::= s_expr
yacc: s_expr_list ::= s_expr s_expr_list
yacc: s_expr ::= LPAREN FUNC s_expr RPAREN
yacc: s_expr ::= f_expr
lex: RPAREN
yacc: s_expr_list ::= s_expr
yacc: s_expr_list ::= s_expr s_expr_list
yacc: s_expr ::= LPAREN SYMBOL s_expr_list RPAREN
yacc: s_expr ::= f_expr
lex: RPAREN
yacc: s_expr ::= LPAREN let_section s_expr RPAREN
lex: EOL
yacc: program ::= s_expr EOL
########Int Type: 9

> ((let (int a 1)(f lambda (x y) (add x y)))(f 2 (f a 3)))
lex: LPAREN
lex: LPAREN
lex: LET
lex: LPAREN
lex: TYPE sval = int
lex: SYMBOL sval = a
lex: INT dval = 1.000000
yacc: number ::= INT
yacc: s_expr ::= number
lex: RPAREN
yacc: let_elem ::= LPAREN TYPE SYMBOL s_expr RPAREN
yacc: let_list ::= LET let_elem
lex: LPAREN
lex: SYMBOL sval = f
lex: LAMBDA
lex: LPAREN
lex: SYMBOL sval = x
lex: SYMBOL sval = y
lex: RPAREN
yacc: arg_list ::= SYMBOL
yacc: arg_list ::= SYMBOL arg_list
lex: LPAREN
lex: FUNC sval = add
lex: SYMBOL sval = x
yacc: s_expr ::= SYMBOL
lex: SYMBOL sval = y
yacc: s_expr ::= SYMBOL
lex: RPAREN
yacc: s_expr_list ::= s_expr
yacc: s_expr_list ::= s_expr s_expr_list
yacc: s_expr ::= LPAREN FUNC s_expr RPAREN
yacc: s_expr ::= f_expr
lex: RPAREN
yacc: let_elem ::= LPAREN SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN
yacc: let_list ::= let_list let_elem
lex: RPAREN
yacc: let_section ::= LPAREN let_list RPAREN
lex: LPAREN
lex: SYMBOL sval = f
lex: INT dval = 2.000000
yacc: number ::= INT
yacc: s_expr ::= number
lex: LPAREN
lex: SYMBOL sval = f
lex: SYMBOL sval = a
yacc: s_expr ::= SYMBOL
lex: INT dval = 3.000000
yacc: number ::= INT
yacc: s_expr ::= number
lex: RPAREN
yacc: s_expr_list ::= s_expr
yacc: s_expr_list ::= s_expr s_expr_list
yacc: s_expr ::= LPAREN SYMBOL s_expr_list RPAREN
yacc: s_expr ::= f_expr
lex: RPAREN
yacc: s_expr_list ::= s_expr
yacc: s_expr_list ::= s_expr s_expr_list
yacc: s_expr ::= LPAREN SYMBOL s_expr_list RPAREN
yacc: s_expr ::= f_expr
lex: RPAREN
yacc: s_expr ::= LPAREN let_section s_expr RPAREN
lex: EOL
yacc: program ::= s_expr EOL
########Int Type: 6

> ((let (countdown lambda (x) (cond (greater x 0) (countdown (print (sub x 1))) (print x)))) (countdown 10))
lex: LPAREN
lex: LPAREN
lex: LET
lex: LPAREN
lex: SYMBOL sval = countdown
lex: LAMBDA
lex: LPAREN
lex: SYMBOL sval = x
lex: RPAREN
yacc: arg_list ::= SYMBOL
lex: LPAREN
lex: COND
lex: LPAREN
lex: FUNC sval = greater
lex: SYMBOL sval = x
yacc: s_expr ::= SYMBOL
lex: INT dval = 0.000000
yacc: number ::= INT
yacc: s_expr ::= number
lex: RPAREN
yacc: s_expr_list ::= s_expr
yacc: s_expr_list ::= s_expr s_expr_list
yacc: s_expr ::= LPAREN FUNC s_expr RPAREN
yacc: s_expr ::= f_expr
lex: LPAREN
lex: SYMBOL sval = countdown
lex: LPAREN
lex: FUNC sval = print
lex: LPAREN
lex: FUNC sval = sub
lex: SYMBOL sval = x
yacc: s_expr ::= SYMBOL
lex: INT dval = 1.000000
yacc: number ::= INT
yacc: s_expr ::= number
lex: RPAREN
yacc: s_expr_list ::= s_expr
yacc: s_expr_list ::= s_expr s_expr_list
yacc: s_expr ::= LPAREN FUNC s_expr RPAREN
yacc: s_expr ::= f_expr
lex: RPAREN
yacc: s_expr_list ::= s_expr
yacc: s_expr ::= LPAREN FUNC s_expr RPAREN
yacc: s_expr ::= f_expr
lex: RPAREN
yacc: s_expr_list ::= s_expr
yacc: s_expr ::= LPAREN SYMBOL s_expr_list RPAREN
yacc: s_expr ::= f_expr
lex: LPAREN
lex: FUNC sval = print
lex: SYMBOL sval = x
yacc: s_expr ::= SYMBOL
lex: RPAREN
yacc: s_expr_list ::= s_expr
yacc: s_expr ::= LPAREN FUNC s_expr RPAREN
yacc: s_expr ::= f_expr
lex: RPAREN
yacc: s_expr ::= LPAREN COND s_expr s_expr s_expr RPAREN
lex: RPAREN
yacc: let_elem ::= LPAREN SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN
yacc: let_list ::= LET let_elem
lex: RPAREN
yacc: let_section ::= LPAREN let_list RPAREN
lex: LPAREN
lex: SYMBOL sval = countdown
lex: INT dval = 10.000000
yacc: number ::= INT
yacc: s_expr ::= number
lex: RPAREN
yacc: s_expr_list ::= s_expr
yacc: s_expr ::= LPAREN SYMBOL s_expr_list RPAREN
yacc: s_expr ::= f_expr
lex: RPAREN
yacc: s_expr ::= LPAREN let_section s_expr RPAREN
lex: EOL
yacc: program ::= s_expr EOL
print: 9,
print: 8,
print: 7,
print: 6,
print: 5,
print: 4,
print: 3,
print: 2,
print: 1,
print: 0,
print: 0,
########Int Type: 0

> ((let (gcd lambda (x y) (cond (greater y x) (gcd y x) (cond (equals y 0) (x) (gcd y (remainder x y)))))) (gcd 95 55))
lex: LPAREN
lex: LPAREN
lex: LET
lex: LPAREN
lex: SYMBOL sval = gcd
lex: LAMBDA
lex: LPAREN
lex: SYMBOL sval = x
lex: SYMBOL sval = y
lex: RPAREN
yacc: arg_list ::= SYMBOL
yacc: arg_list ::= SYMBOL arg_list
lex: LPAREN
lex: COND
lex: LPAREN
lex: FUNC sval = greater
lex: SYMBOL sval = y
yacc: s_expr ::= SYMBOL
lex: SYMBOL sval = x
yacc: s_expr ::= SYMBOL
lex: RPAREN
yacc: s_expr_list ::= s_expr
yacc: s_expr_list ::= s_expr s_expr_list
yacc: s_expr ::= LPAREN FUNC s_expr RPAREN
yacc: s_expr ::= f_expr
lex: LPAREN
lex: SYMBOL sval = gcd
lex: SYMBOL sval = y
yacc: s_expr ::= SYMBOL
lex: SYMBOL sval = x
yacc: s_expr ::= SYMBOL
lex: RPAREN
yacc: s_expr_list ::= s_expr
yacc: s_expr_list ::= s_expr s_expr_list
yacc: s_expr ::= LPAREN SYMBOL s_expr_list RPAREN
yacc: s_expr ::= f_expr
lex: LPAREN
lex: COND
lex: LPAREN
lex: SYMBOL sval = equals
lex: SYMBOL sval = y
yacc: s_expr ::= SYMBOL
lex: INT dval = 0.000000
yacc: number ::= INT
yacc: s_expr ::= number
lex: RPAREN
yacc: s_expr_list ::= s_expr
yacc: s_expr_list ::= s_expr s_expr_list
yacc: s_expr ::= LPAREN SYMBOL s_expr_list RPAREN
yacc: s_expr ::= f_expr
lex: LPAREN
lex: SYMBOL sval = x
lex: RPAREN
yacc: s_expr ::= SYMBOL
yacc: s_expr ::= LPAREN s_expr RPAREN
lex: LPAREN
lex: SYMBOL sval = gcd
lex: SYMBOL sval = y
yacc: s_expr ::= SYMBOL
lex: LPAREN
lex: FUNC sval = remainder
lex: SYMBOL sval = x
yacc: s_expr ::= SYMBOL
lex: SYMBOL sval = y
yacc: s_expr ::= SYMBOL
lex: RPAREN
yacc: s_expr_list ::= s_expr
yacc: s_expr_list ::= s_expr s_expr_list
yacc: s_expr ::= LPAREN FUNC s_expr RPAREN
yacc: s_expr ::= f_expr
lex: RPAREN
yacc: s_expr_list ::= s_expr
yacc: s_expr_list ::= s_expr s_expr_list
yacc: s_expr ::= LPAREN SYMBOL s_expr_list RPAREN
yacc: s_expr ::= f_expr
lex: RPAREN
yacc: s_expr ::= LPAREN COND s_expr s_expr s_expr RPAREN
lex: RPAREN
yacc: s_expr ::= LPAREN COND s_expr s_expr s_expr RPAREN
lex: RPAREN
yacc: let_elem ::= LPAREN SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN
yacc: let_list ::= LET let_elem
lex: RPAREN
yacc: let_section ::= LPAREN let_list RPAREN
lex: LPAREN
lex: SYMBOL sval = gcd
lex: INT dval = 95.000000
yacc: number ::= INT
yacc: s_expr ::= number
lex: INT dval = 55.000000
yacc: number ::= INT
yacc: s_expr ::= number
lex: RPAREN
yacc: s_expr_list ::= s_expr
yacc: s_expr_list ::= s_expr s_expr_list
yacc: s_expr ::= LPAREN SYMBOL s_expr_list RPAREN
yacc: s_expr ::= f_expr
lex: RPAREN
yacc: s_expr ::= LPAREN let_section s_expr RPAREN
lex: EOL
yacc: program ::= s_expr EOL
########Int Type: 95

> ((let (gcd lambda (x y) (cond (greater y x) (gcd y x) (cond (equal y 0) (x) (gcd y (remainder x y)))))) (gcd 95 55))
lex: LPAREN
lex: LPAREN
lex: LET
lex: LPAREN
lex: SYMBOL sval = gcd
lex: LAMBDA
lex: LPAREN
lex: SYMBOL sval = x
lex: SYMBOL sval = y
lex: RPAREN
yacc: arg_list ::= SYMBOL
yacc: arg_list ::= SYMBOL arg_list
lex: LPAREN
lex: COND
lex: LPAREN
lex: FUNC sval = greater
lex: SYMBOL sval = y
yacc: s_expr ::= SYMBOL
lex: SYMBOL sval = x
yacc: s_expr ::= SYMBOL
lex: RPAREN
yacc: s_expr_list ::= s_expr
yacc: s_expr_list ::= s_expr s_expr_list
yacc: s_expr ::= LPAREN FUNC s_expr RPAREN
yacc: s_expr ::= f_expr
lex: LPAREN
lex: SYMBOL sval = gcd
lex: SYMBOL sval = y
yacc: s_expr ::= SYMBOL
lex: SYMBOL sval = x
yacc: s_expr ::= SYMBOL
lex: RPAREN
yacc: s_expr_list ::= s_expr
yacc: s_expr_list ::= s_expr s_expr_list
yacc: s_expr ::= LPAREN SYMBOL s_expr_list RPAREN
yacc: s_expr ::= f_expr
lex: LPAREN
lex: COND
lex: LPAREN
lex: FUNC sval = equal
lex: SYMBOL sval = y
yacc: s_expr ::= SYMBOL
lex: INT dval = 0.000000
yacc: number ::= INT
yacc: s_expr ::= number
lex: RPAREN
yacc: s_expr_list ::= s_expr
yacc: s_expr_list ::= s_expr s_expr_list
yacc: s_expr ::= LPAREN FUNC s_expr RPAREN
yacc: s_expr ::= f_expr
lex: LPAREN
lex: SYMBOL sval = x
lex: RPAREN
yacc: s_expr ::= SYMBOL
yacc: s_expr ::= LPAREN s_expr RPAREN
lex: LPAREN
lex: SYMBOL sval = gcd
lex: SYMBOL sval = y
yacc: s_expr ::= SYMBOL
lex: LPAREN
lex: FUNC sval = remainder
lex: SYMBOL sval = x
yacc: s_expr ::= SYMBOL
lex: SYMBOL sval = y
yacc: s_expr ::= SYMBOL
lex: RPAREN
yacc: s_expr_list ::= s_expr
yacc: s_expr_list ::= s_expr s_expr_list
yacc: s_expr ::= LPAREN FUNC s_expr RPAREN
yacc: s_expr ::= f_expr
lex: RPAREN
yacc: s_expr_list ::= s_expr
yacc: s_expr_list ::= s_expr s_expr_list
yacc: s_expr ::= LPAREN SYMBOL s_expr_list RPAREN
yacc: s_expr ::= f_expr
lex: RPAREN
yacc: s_expr ::= LPAREN COND s_expr s_expr s_expr RPAREN
lex: RPAREN
yacc: s_expr ::= LPAREN COND s_expr s_expr s_expr RPAREN
lex: RPAREN
yacc: let_elem ::= LPAREN SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN
yacc: let_list ::= LET let_elem
lex: RPAREN
yacc: let_section ::= LPAREN let_list RPAREN
lex: LPAREN
lex: SYMBOL sval = gcd
lex: INT dval = 95.000000
yacc: number ::= INT
yacc: s_expr ::= number
lex: INT dval = 55.000000
yacc: number ::= INT
yacc: s_expr ::= number
lex: RPAREN
yacc: s_expr_list ::= s_expr
########Int Type: 5
yacc: s_expr_list ::= s_expr s_expr_list

yacc: s_expr ::= LPAREN SYMBOL s_expr_list RPAREN
> yacc: s_expr ::= f_expr
lex: RPAREN
yacc: s_expr ::= LPAREN let_section s_expr RPAREN
lex: EOL
yacc: program ::= s_expr EOL
quit
yacc: s_expr ::= QUIT

Process finished with exit code 0
